using ImpostorHqR.Extension.Api;

namespace ImpostorHqR.Core.Web.Page.Generator.Api.ApiGraphPage.Splicer
{
    public static partial class GraphPageSplicer
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="variableNames">The names of the global variables that will be updated by the receive function.</param>
        /// <param name="plots">The plot function as generated by the SpliceGraph method.</param>
        /// <param name="ctxDeclarationsNames">The names of the graph contexts, present in the HTML declarations.</param>
        /// <returns></returns>
        public static string SpliceMainScript(ushort port, string apiHandle, string[] variableNames, string[] plots, string[] ctxDeclarationsNames)
        {
            using var sb = IReusableStringBuilder.Get();

            foreach (var variable in variableNames) sb.AppendLine($"var {variable} = null;");

            var variables = sb.ToString();
            sb.Clear();

            foreach (var ctx in ctxDeclarationsNames)
            {
                sb.AppendLine($"var x{ctx} = document.getElementById('{ctx}');");
                sb.AppendLine($"var {ctx} = x{ctx}.getContext('2d');");
                sb.AppendLine("\n");
            }

            var ctxStr = sb.ToString();
            sb.Clear();

            foreach (var plot in plots)
            {
                sb.AppendLine($"\n{plot}\n");
            }

            var plotsStr = sb.ToString();
            sb.Clear();

            foreach (var receiverName in variableNames)
            {
                sb.AppendLine($"{receiverName} = receivedJson.{receiverName};");
            }

            var receiverStr = sb.ToString();

            return GraphPageSplicerConstant.MainScriptCode
                .Replace(GraphPageSplicerConstant.ReplaceInValue, variables)
                .Replace(GraphPageSplicerConstant.ReplaceInCtx, ctxStr)
                .Replace(GraphPageSplicerConstant.ReplaceInPlot, plotsStr)
                .Replace(GraphPageSplicerConstant.ReplaceInJsonExtracts, receiverStr)
                .Replace("%handle%", apiHandle)
                .Replace("%port%", port.ToString());
        }
    }
}
